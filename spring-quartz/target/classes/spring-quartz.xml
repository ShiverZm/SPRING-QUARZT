<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">  
   
    <description>持久化集群quartz</description>
    
    <!-- 定时器配置 -->
    <bean id="myJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="createTableShelvesInvokingJob" />
		</property>
		<property name="cronExpression">
		    <!-- cron 表达式一分钟执行一次 -->
			<value>0 */1 * * * ?</value>
		</property>
	</bean>
	
	 <bean id="myJobTriggerTo" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="createTableShelvesInvokingJobTo" />
		</property>
		<property name="cronExpression">
		    <!-- cron 表达式一分钟执行一次 -->
			<value>0 */1 * * * ?</value>
		</property>
	</bean>
	<!-- 调度的配置结束 --> 
          
     <!--task实例 -->  
     <bean id="colonyScheduleTask" class="org.dreams.fly.task.ColonyScheduleTask"></bean>

	 <bean id="createTableShelvesInvokingJob"  class="org.springframework.scheduling.quartz.JobDetailFactoryBean">  
        <!-- durability 表示任务完成之后是否依然保留到数据库，默认false   -->  
         <property name="durability" value="true" />  
         <property name="requestsRecovery" value="true" />     
         <property name="jobClass">  
                <value>org.dreams.fly.quartz.DisallowConcurrentCustomDetailQuartzJobBean</value>  
        </property>   
       <property name="jobDataAsMap">  
             <map>  
                  <!-- colonyScheduleTask task 实例引用 -->
                  <entry key="targetObject" value="colonyScheduleTask" /> 
                  <!-- colonyScheduleTask 实例执行的方法 -->
                  <entry key="targetMethod" value="insertExample" /> 
            </map>  
        </property>  
    </bean> 
     <bean id="createTableShelvesInvokingJobTo"  class="org.springframework.scheduling.quartz.JobDetailFactoryBean">  
        <!-- durability 表示任务完成之后是否依然保留到数据库，默认false   -->  
         <property name="durability" value="true" />  
         <property name="requestsRecovery" value="true" />     
         <property name="jobClass">  
                <value>org.dreams.fly.quartz.DisallowConcurrentCustomDetailQuartzJobBean</value>  
        </property>   
       <property name="jobDataAsMap">  
             <map>  
                  <!-- colonyScheduleTask task 实例引用 -->
                  <entry key="targetObject" value="colonyScheduleTask" /> 
                  <!-- colonyScheduleTask 实例执行的方法 -->
                  <entry key="targetMethod" value="secheduleTask" /> 
            </map>  
        </property>  
    </bean> 
     
     <!-- quartz scheduler监听实例 -->
    <bean id = "quartzSchedulerListener" class = "org.dreams.fly.quartz.listener.CustomSchedulerListener"/>
     <!-- quartz job监听实例 -->
    <bean id = "quartzJobListener" class = "org.dreams.fly.quartz.listener.CustomJobListener"/>
      <!-- quartz trigger监听实例 -->
    <bean id = "quartzTriggerListener" class = "org.dreams.fly.quartz.listener.CustomTriggerListener"/>
    
    <!-- quartz 核心工厂配置    lazy-init 延时加载，当spring容器初始化的时候不十里河此bean-->
    <!-- autowire no不支持通过@Autowired自动装配此bean -->
	<bean id="quartzScheduler" lazy-init="false"  autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- 数据源配置 -->
		<property name="dataSource" ref="dataSource" />
		<!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动  根据电脑性能设置-->
		<property name="startupDelay" value="35" />
		<!-- 注入spring的上下文 -->
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
		<property name="overwriteExistingJobs" value="true" />
		<!-- 设置自动启动 -->
		<property name="autoStartup" value="true" />
		<!-- 加载quartz配置文件 -->
		<property name="configLocation" value="classpath:quartz.properties" />
		<!-- 注册触发器 -->
		<property name="triggers">
			<list>
				<ref bean="myJobTrigger" />
				<ref bean="myJobTriggerTo" />
			</list>
		</property>
		<!--注册 quartzScheduler 监听-->
		<property name="schedulerListeners">
			<list>
				<ref bean="quartzSchedulerListener" />
			</list>
		</property>
		<!--注册 quartzJob 监听-->
		<property name="globalJobListeners">
		  <list>
		    <ref bean="quartzJobListener" />
		  </list>
		</property>
		<!--注册 quartzTrigger 监听-->
		 <property name="globalTriggerListeners">
		  <list>
		   <ref bean="quartzTriggerListener" />
		  </list>
		</property>
	</bean>
</beans>  